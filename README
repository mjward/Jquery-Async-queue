usage example (PSEUDO JS CODE):

var storeItemOnline = function(q, itemDetails) {
    console.log('storeItemOnline');

    // pause the queue until we're finished
    q.pause();

    function onSuccess(json) {
        // store the received data in the queue object,
        // it will be used by the next function in the queue
        q.storeData(json.item);

        // resume queue execution
        q.run();
    }

    function onError() {
        // call the failure function of the queue
        q.failure(arguments);
    }

    // execute your ajax request
    ajax.send(..., onSuccess, onError);
}

var storeItemDb = function(q, item) {
    console.log('storeItemDb', arguments);

    // pause the queue
    q.pause();

    function onSuccess (sqlTransaction, sqlResults) {
        // resume queue execution
        q.run();
    }

    function onError () {
        // do whatever you want...
        // but at the end, call the failure function
        // of the queue to let it know
        q.failure(arguments);
    }

    // execute the transaction
    db.transaction(
        function(tx) {
            var sql = "INSERT OR REPLACE INTO item (title) VALUES(?);";
            tx.executeSql(sql, [item.title]);
        },
        onError,
        onSuccess
    );
}

var q = new $.AsyncQueue();
q.onFailure(function() {
    console.log('FAILURE, these are the arguments:', arguments);
});
q.add(function(q) {
    storeItemOnline(q, {"title": "my item"});
});
q.add(function(q) {
    storeItemDb(q, q.lastCallbackData());
});
q.add(function(q) {console.log('finished!')});
q.run();
